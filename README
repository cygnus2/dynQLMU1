%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Description of development of the ED code    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
1. CODES1: This incorporates
           a) bit-wise representation of the basis states.
           b) Fast gauge-invariant state counting, which can avoid a single jam point. 
              This works easily for 6x6, but becomes slow for 8x6.
           c) Filters basis states which have no flippable plaquettes. 
           d) The whole Hamiltonian matrix (for abritrary lambda) is constructed without regard to 
              symmetry.
           e) In terms of diagonalization, it can work fast till ~32 spins using the Intel FEAST 
              routine.
           f) Computes a local observable, ie, the flippability of individual plaquettes, summed
              over the volume for all the eigenvectors.
         **g) It remains to be understood why the time evolution is independent of the sign of the 
              lambda. 

2. CODES2: In addition to the actions in CODES1, this version
           a) Does not explicitly filter any states.
           b) Does a winding number decomposition.
           c) Constructs the Hamiltonian in the specified winding number sector. 
           d) Calculates the eigenvectors and eigenvalues, still using Intel FEAST. 
           e) Same as (f).

3. CODES2A: This set of codes create the Hamiltonian of a disordered system, by choosing
            the coupling LAMBDA randomly. It diagonalizes and prints the eigenvalues, and
            the local operator O_flip for every eigenstate. This operation is performed for
            a chosen winding number sector. 
          
            With the couplings disordered, and the charge conjugation symmetry taken into
            account, there are no more symmteries on a ladder system of dimensions, L x 2. 
            Hence the results from this code can be used to check the ETH in gauge theories.

4. CODES2B: This is a new directory where I am trying to implement the Lanczos algorithm,
            first to find the ground states, and eventually to the real-time dynamics.


4. CODES3:  This section implements the translation invariance, but not the charge conjugation.
            The Hamiltonian in the (kx, ky) = (0, 0) is constructed, and also subsequently
            diagonalized. The operator O_flip is calculated in this sector. 


#====================
# TO-DO
#====================
 Fix the ambiguity between ROW_MAJOR vs COL_MAJOR in CODES2A.
 The ones in CODES2 and CODES3 are done!
