/* construct the Hamiltonian matrix from the basis vectors */
// This constructs the Hamiltonian in a chosen winding number basis
#include<stdio.h>
#include<stdlib.h>
#include<iostream>
#include<fstream>
#include<math.h>
#include<vector>
#include<algorithm>
#include "define.h"
#include "mkl.h"
#include "mkl_solvers_ee.h"
#include "mkl_types.h"

void constH(int sector){

   extern void eigcheck(std::vector<double>&, std::vector<std::vector<double>>&,int); 
   extern void diag_LAPACK_RRR(MKL_INT, std::vector<double>&, std::vector<double>&, std::vector<double>&);
   extern void diag_LAPACK(MKL_INT, std::vector<double>&, std::vector<double>&, std::vector<double>&);
   extern void printmatrix(std::vector<MKL_INT>&,std::vector<MKL_INT>&,std::vector<double>&);

   // workspace variables to construct the Hamiltonian  
   int i,j,k,p,q,r;
   int p1,p2,p3,p4;
   int q1,q2,q3,q4;
   int ix,iy;
   int n_Flip;
   int stateq,curr_index;
   bool pxy,pyz,pzw,pwx;
   bool qxy,qyz,qzw,qwx;
   std::vector<bool> newstate(2*VOL);
   std::vector<int> rowscan(VOL+1);
   // rowscan stores the elements of the cartoon states generated by the action of the Hamiltonian
   // the maximal number of NEW states that can be generated by action of the Hamiltonian on the
   // basis state = VOL. In addition, the lambda counts the number of flippable terms in the state.

   // note that corrf1(0) corresponds to the corrf at distance 1,..., corrf(LX/2-1) is the maximally
   // separated one. At distance 0, the correlation function is just the same as oflip.
   std::vector<double> corrf1(LX/2);
   int x,y;
   bool f1,f2;
  
   printf("Construct Hamiltonian in sector %d with basis states =%ld. \n",sector,Wind[sector].nBasis);
   curr_index=1;
   Wind[sector].rows.push_back(curr_index);
   // scan through the basis vectors in this sector
   for(i=0;i<Wind[sector].nBasis;i++){
      newstate = Wind[sector].basisVec[i];

      // initialize the correlation functions for a given basis state
      for(r=0;r<(LX/2);r++) corrf1[r]=0.0;
  
      /* act on the basis state with the Hamiltonian */
      /* a single plaquette is arranged as 
                pzw
             o-------o
             |       |
        pwx  |   p   |  pyz
             |       |
             o-------o
                pxy
      */
      for(j=0;j<=VOL;j++) rowscan[j]=NTOT;
      stateq = 0;
      for(p=0;p<VOL;p++){
       f1=false; //f1 stores the flippability
       // Find if a single plaquette is flippable 
       p1=2*p; p2=2*next[DIM+1][p]+1; p3=2*next[DIM+2][p]; p4=2*p+1;
       pxy=newstate[p1]; pyz=newstate[p2]; pzw=newstate[p3]; pwx=newstate[p4];
       if((pxy==pyz)&&(pzw==pwx)&&(pwx!=pxy)){
         // If flippable, act with the Hamiltonian 
         newstate[p1]=!newstate[p1]; newstate[p2]=!newstate[p2];
         newstate[p3]=!newstate[p3]; newstate[p4]=!newstate[p4];
         // check which state it is by scanning other states in the same sector
         // use the bin search if the basis states are sorted; it is much faster
         //q=Wind[sector].scan(newstate);
         q=Wind[sector].binscan(newstate);
         // store the position matrix element (i,stateq) 
         rowscan[stateq]=q; stateq++;
         //flip back the plq
         newstate[p1]=!newstate[p1]; newstate[p2]=!newstate[p2];
         newstate[p3]=!newstate[p3]; newstate[p4]=!newstate[p4];
         //if(newstate!=basis_flip[i]) std::cout<<"state mismatch"<<std::endl;

         f1=true;
       }

       // calculate the corrF in the basis state
       for(r=1;r<=(LX/2);r++){
         f2=false;
         // go r units forward in x
         ix = p%LX; iy = p/LX; q= iy*LX + (ix+r)%LX; 
         q1=2*q; q2=2*next[DIM+1][q]+1; q3=2*next[DIM+2][q]; q4=q1+1;
         qxy=newstate[q1]; qyz=newstate[q2]; qzw=newstate[q3]; qwx=newstate[q4];
         if((qxy==qyz)&&(qzw==qwx)&&(qwx!=qxy)) f2=true;
         if((f1)&&(f2)) corrf1[r-1]++;
       }
     }
   
     // normalize and store the correlation function
     for(r=0;r<(LX/2);r++) corrf1[r] /= VOL;
     Wind[sector].cflip.push_back(corrf1);

     // continue making the Hamiltonian
     //store the diagonal location
     rowscan[stateq]=i; stateq++;
     // get the #-of-flippable plaquettes of the basis state-i
     n_Flip=Wind[sector].nflip[i];
     // check
     if(stateq > (VOL+1)){ printf("Error in bound.\n"); }
     // sort the matrix columns
     std::sort (rowscan.begin(), rowscan.end()); 
     // construct the matrix in CSC format
     curr_index = curr_index + stateq;
     Wind[sector].rows.push_back(curr_index);
     for(k=0;k<stateq;k++){
       Wind[sector].cols.push_back(rowscan[k]+1);
       if(rowscan[k]==i) Wind[sector].hamil.push_back(lam*n_Flip);
       else Wind[sector].hamil.push_back(-1.0);
     }
   }
   //printf("size of rows = %d \n",(int)Wind[sector].rows.size());
   //for(k=0;k<Wind[sector].rows.size();k++) printf("row[%d] = %ld \n",k,Wind[sector].rows[k]);
   //printf("size of cols = %d \n",(int)Wind[sector].cols.size());
   //for(k=0;k<Wind[sector].cols.size();k++) printf("col[%d] = %ld; ham[%d] = %lf\n",k, Wind[sector].cols[k],k,Wind[sector].hamil[k]);

   //test print the correlation functions
   //for(i=0;i<Wind[sector].nBasis;i++){
   //  std::cout<<"Basis state ="<<i<<std::endl;
   //  for(r=0;r<(LX/2);r++) std::cout<<Wind[sector].cflip[i][r]<<" ";
   //  std::cout<<std::endl;
   //}   

   // diagonalize: use RELATIVELY ROBUST REPRESENTATIONS
   //diag_LAPACK(sector, Wind[sector].hamil, Wind[sector].evals, Wind[sector].evecs);
   diag_LAPACK_RRR(sector, Wind[sector].hamil, Wind[sector].evals, Wind[sector].evecs);
}

int WindNo::scan(std::vector<bool> &newstate){
   for(int m=0;m<nBasis;m++){
     if(newstate==basisVec[m]) return m;
   }
   return -100;
 }

int WindNo::binscan(std::vector<bool> &newstate){
     unsigned int m;
     // binary search of the sorted array  
     std::vector<std::vector<bool>>::iterator it;
     it = std::lower_bound(basisVec.begin(),basisVec.end(),newstate);
     m  = std::distance(basisVec.begin(),it);
     if(it == basisVec.end()){
       std::cout<<"Element not found here! "<<std::endl;
       return -100;
     }
     return m;
}

// Alternate implementation of the search. Find where the required element 
// exists in the vector with the iterator, then the index.  
int WindNo::binscan2(std::vector<bool> &newstate){
     unsigned int m;
     std::vector<std::vector<bool>>::iterator it;
     it = std::find(basisVec.begin(),basisVec.end(),newstate);
     if(it == basisVec.end()){
       //std::cout<<"Element not found here! "<<std::endl; 
       return -100;
     }
     m  = std::distance(basisVec.begin(),it);
     return m;
}

double WindNo::getH(int p,int q){
   double ele;
   double row1,row2;
   int c;

   ele=0.0;
   row1 = rows[p]-1; row2 = rows[p+1]-1;
   for(c=row1;c<row2;c++){
     if((q+1)==cols[c]) { ele=hamil[c]; break; }
   }
   return ele;
}
